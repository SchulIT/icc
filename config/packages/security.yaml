# To get started with security, check out the documentation:
# https://symfony.com/doc/current/security.html
parameters:
    app.cron_password: '%env(resolve:CRON_PASSWORD)%'

security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        database:
            entity:
                class: App\Entity\User
                property: idpId
        database_with_username:
            entity:
                class: App\Entity\User
                property: username
        oauth2:
            entity:
                class: App\Entity\User
                property: username
        cron:
            id: App\Security\CronUserProvider
        import:
            memory:
                users:
                    import: { password: '', roles: [ 'ROLE_IMPORT' ]}

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/logout/success, roles: PUBLIC_ACCESS }
        - { path: ^/saml/(login|discovery|metadata.xml)$, roles: PUBLIC_ACCESS }
        - { path: ^/auth/error, roles: PUBLIC_ACCESS }
        - { path: ^/display/, roles: PUBLIC_ACCESS }
        - { path: ^/admin/ea/, roles: ROLE_SUPER_ADMIN }
        - { path: ^/admin/audit/, roles: ROLE_SUPER_ADMIN }
        - { path: ^/tools/, roles: ROLE_TOOLS }
        - { path: ^/settings/dark_mode$, roles: ROLE_USER }
        - { path: ^/settings/, roles: ROLE_ADMIN }
        - { path: ^/admin/editor/links$ , roles: [ ROLE_MESSAGE_CREATOR, ROLE_WIKI_ADMIN, ROLE_DOCUMENTS_ADMIN ] }
        - { path: ^/admin/(messages|exams|documents|appointments|import), roles: ROLE_USER }
        - { path: ^/admin/wiki, roles: ROLE_WIKI_ADMIN }
        - { path: ^/admin$, roles: ROLE_USER }
        - { path: ^/admin/, roles: ROLE_ADMIN }
        - { path: ^/api/import, roles: ROLE_IMPORT }
        - { path: ^/absence/export, roles: ROLE_ADMIN }
        - { path: ^/book/, roles: ROLE_BOOK_VIEWER }
        - { path: ^/authorize, roles: IS_AUTHENTICATED_REMEMBERED }
        - { path: ^/cron, roles: ROLE_CRON }
        - { path: ^, roles: ROLE_USER }

    role_hierarchy:
        # Administrator
        ROLE_ADMIN: [ ROLE_USER, ROLE_TOOLS, ROLE_IMPORTER, ROLE_WIKI_ADMIN, ROLE_DOCUMENTS_ADMIN, ROLE_MESSAGE_ADMIN, ROLE_APPOINTMENTS_ADMIN, ROLE_EXAMS_ADMIN, ROLE_STUDENT_ABSENCE_VIEWER, ROLE_STUDENT_ABSENCE_CREATOR, ROLE_STUDENT_ABSENCE_APPROVER, ROLE_BOOK_ENTRY_CREATOR, ROLE_SHOW_BIRTHDAY, ROLE_TEACHER_ABSENCE_MANAGER, ROLE_LISTS_EXPORTER, ROLE_CHAT_MOD ]
        # Administrator which is allowed to switch user
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]

        # Role which enables users to view all messages
        ROLE_MESSAGE_VIEWER: ROLE_USER

        # Role which enables users to create messages
        ROLE_MESSAGE_CREATOR: ROLE_USER

        # Role which enables all administrative operations for messages
        ROLE_MESSAGE_ADMIN: [ ROLE_MESSAGE_PRIORITY, ROLE_MESSAGE_CREATOR, ROLE_MESSAGE_VIEWER ]

        # Role which enables all administrative operations for the wiki
        ROLE_WIKI_ADMIN: ROLE_USER

        # Role which enables users to view all documents
        ROLE_DOCUMENT_VIEWER: ROLE_USER

        # Role which enables all administrative operations for documents
        ROLE_DOCUMENTS_ADMIN: ROLE_DOCUMENT_VIEWER

        # Role which enables users to view all appointments
        ROLE_APPOINTMENT_VIEWER: ROLE_USER

        # Role which enables all administrative operations for appointments
        ROLE_APPOINTMENTS_ADMIN: [ ROLE_APPOINTMENT_CREATOR, ROLE_APPOINTMENT_VIEWER ]

        # Role which enables users to set message priorities
        ROLE_MESSAGE_PRIORITY: ROLE_MESSAGE_CREATOR

        # Role which enables users to view all exams
        ROLE_EXAM_VIEWER: ROLE_USER

        # Role which enables all administrative operations for exams
        ROLE_EXAMS_ADMIN: [ ROLE_EXAMS_CREATOR, ROLE_EXAM_VIEWER ]

        # Role which enables users to create exams (and manage their created exams)
        ROLE_EXAMS_CREATOR: ROLE_USER

        # Role which enabled users to create sick notes for every student
        ROLE_STUDENT_ABSENCE_CREATOR: ROLE_STUDENT_ABSENCE_VIEWER

        # Role which enables users to see sick notes
        ROLE_STUDENT_ABSENCE_VIEWER: ROLE_USER

        # Role which enables users to view all teacher absences
        ROLE_TEACHER_ABSENCE_VIEWER: ROLE_USER

        # Role which enables users to manage teachers absences
        ROLE_TEACHER_ABSENCE_MANAGER: [ ROLE_TEACHER_ABSENCE_VIEWER ]

        # Role which enables users to view tuition books
        ROLE_BOOK_VIEWER: ROLE_USER

        # Role which enables users to edit tuition books
        ROLE_BOOK_ENTRY_CREATOR: ROLE_BOOK_VIEWER

        # Role which enables users to see student birthdays
        ROLE_SHOW_BIRTHDAY: ROLE_USER

        # Role which enables users to view resource reservations
        ROLE_RESOURCE_RESERVATION_VIEWER: ROLE_USER

        # Role which enables users to create resource reservations
        ROLE_RESOURCE_RESERVATION_CREATOR: ROLE_RESOURCE_RESERVATION_VIEWER

        # Role which enables users to view lists
        ROLE_LISTS_VIEWER: ROLE_USER

        # Role which enables users to export lists
        ROLE_LISTS_EXPORTER: ROLE_LISTS_VIEWER

        # Users with this role can edit chats
        ROLE_CHAT_MOD: ROLE_USER

        # Role which enables users to import data
        ROLE_IMPORTER: ROLE_USER

        # Cronjob user
        ROLE_CRON: ROLE_USER

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        cron:
            pattern: ^/cron
            provider: cron
            stateless: true
            http_basic:
                realm: Cronjob

        import:
            pattern: ^/api/import
            provider: import
            custom_authenticators:
                - App\Security\ImportUserAuthenticator
            stateless: true

        #api_token:
        #    pattern: ^/oauth2/token$
        #    security: false

        #api:
        #    pattern: ^/api
        #    security: true
        #    stateless: true
        #    oauth2: true
        #    provider: oauth2

        ics:
            pattern: ^/(appointments|timetable|exams)/ics/download(?!$)
            stateless: true
            custom_authenticators:
                - App\Security\DeviceAuthenticator
            provider: database_with_username

        login:
            pattern: ^/saml/(login|discovery|metadata.xml)$

        logout:
            pattern: ^/logout/success

        display:
            pattern: ^/display/

        secured:
            pattern: ^/
            provider: database
            saml:
                provider: database
                user_creator: App\Security\User\UserCreator
                login_path: /saml/login
                check_path: /saml/login_check
                attribute_mapper: App\Security\User\AttributeMapper
                failure_path: /auth/error
            user_checker: App\Security\UserChecker
            logout:
                path: /logout
                target: /logout/success
            switch_user: true

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
